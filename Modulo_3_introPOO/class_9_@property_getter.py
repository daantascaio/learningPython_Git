# @property - um getter no modo PythÃ´nico
# getter - um mÃ©todo para obter um atributo
# cor -> get_cor()
# modo pythÃ´nico - modo do Python de fazer coisas

# @property Ã© uma propriedade do objeto, ela
# Ã© um mÃ©todo que se comporta como um atributo ðŸ¤¯ ðŸ¤¯ ðŸ¤¯

# Geralmente Ã© usada nas seguintes situaÃ§Ãµes:
# - como getter
# - p/ evitar quebrar cÃ³digo cliente
# - p/ habilitar setter
# - p/ executar aÃ§Ãµes ao obter um atributo

# CÃ³digo cliente - Ã© o cÃ³digo que usa seu cÃ³digo




"""
    AGORA Ã‰ O MODO PYTHÃ”NICO
"""

class Caneta:

    def __init__(self, cor, tampa_cor):
        self.cor_tinta = cor
        self.tampa_cor = tampa_cor

    @property
    def cor(self):
        print(2 + 5)
        return self.cor_tinta
    
    @property
    def tampa(self):    
        return self.tampa_cor

caneta = Caneta('Azul', 'Vermelha')
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print()
print(caneta.tampa)
print(caneta.tampa)
print(caneta.tampa)
print(caneta.tampa)


###################################################################


# class Caneta:
    
#     def __init__(self, cor):
#         #private #protected #public ----> protegendo meus atributos
#         self.cor_tinta = cor

#     def get_cor(self):
#         print('GET COR')
#         return self.cor_tinta


# caneta = Caneta('Azul')
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())